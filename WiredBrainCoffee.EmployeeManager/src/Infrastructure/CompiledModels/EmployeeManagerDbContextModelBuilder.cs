// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Migrations;

#pragma warning disable 219, 612, 618
#nullable disable

namespace WiredBrainCoffee.EmployeeManager.Infrastructure.CompiledModels
{
    public partial class EmployeeManagerDbContextModel
    {
        partial void Initialize()
        {
            var departmentEntity = DepartmentEntityEntityType.Create(this);
            var employeeEntity = EmployeeEntityEntityType.Create(this);

            EmployeeEntityEntityType.CreateForeignKey1(employeeEntity, departmentEntity);

            DepartmentEntityEntityType.CreateAnnotations(departmentEntity);
            EmployeeEntityEntityType.CreateAnnotations(employeeEntity);

            AddAnnotation("ProductVersion", "8.0.0");
            AddRuntimeAnnotation("Relational:RelationalModel", CreateRelationalModel());
        }

        private IRelationalModel CreateRelationalModel()
        {
            var relationalModel = new RelationalModel(this);

            var departmentEntity = FindEntityType("WiredBrainCoffee.EmployeeManager.Infrastructure.Entities.DepartmentEntity")!;

            var defaultTableMappings = new List<TableMappingBase<ColumnMappingBase>>();
            departmentEntity.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings);
            var wiredBrainCoffeeEmployeeManagerInfrastructureEntitiesDepartmentEntityTableBase = new TableBase("WiredBrainCoffee.EmployeeManager.Infrastructure.Entities.DepartmentEntity", null, relationalModel);
            var idColumnBase = new ColumnBase<ColumnMappingBase>("Id", "INTEGER", wiredBrainCoffeeEmployeeManagerInfrastructureEntitiesDepartmentEntityTableBase);
            wiredBrainCoffeeEmployeeManagerInfrastructureEntitiesDepartmentEntityTableBase.Columns.Add("Id", idColumnBase);
            var lastModifiedTimeColumnBase = new ColumnBase<ColumnMappingBase>("LastModifiedTime", "INTEGER", wiredBrainCoffeeEmployeeManagerInfrastructureEntitiesDepartmentEntityTableBase);
            wiredBrainCoffeeEmployeeManagerInfrastructureEntitiesDepartmentEntityTableBase.Columns.Add("LastModifiedTime", lastModifiedTimeColumnBase);
            var nameColumnBase = new ColumnBase<ColumnMappingBase>("Name", "TEXT", wiredBrainCoffeeEmployeeManagerInfrastructureEntitiesDepartmentEntityTableBase);
            wiredBrainCoffeeEmployeeManagerInfrastructureEntitiesDepartmentEntityTableBase.Columns.Add("Name", nameColumnBase);
            var versionColumnBase = new ColumnBase<ColumnMappingBase>("Version", "INTEGER", wiredBrainCoffeeEmployeeManagerInfrastructureEntitiesDepartmentEntityTableBase);
            wiredBrainCoffeeEmployeeManagerInfrastructureEntitiesDepartmentEntityTableBase.Columns.Add("Version", versionColumnBase);
            relationalModel.DefaultTables.Add("WiredBrainCoffee.EmployeeManager.Infrastructure.Entities.DepartmentEntity", wiredBrainCoffeeEmployeeManagerInfrastructureEntitiesDepartmentEntityTableBase);
            var wiredBrainCoffeeEmployeeManagerInfrastructureEntitiesDepartmentEntityMappingBase = new TableMappingBase<ColumnMappingBase>(departmentEntity, wiredBrainCoffeeEmployeeManagerInfrastructureEntitiesDepartmentEntityTableBase, true);
            wiredBrainCoffeeEmployeeManagerInfrastructureEntitiesDepartmentEntityTableBase.AddTypeMapping(wiredBrainCoffeeEmployeeManagerInfrastructureEntitiesDepartmentEntityMappingBase, false);
            defaultTableMappings.Add(wiredBrainCoffeeEmployeeManagerInfrastructureEntitiesDepartmentEntityMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase, departmentEntity.FindProperty("Id")!, wiredBrainCoffeeEmployeeManagerInfrastructureEntitiesDepartmentEntityMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)lastModifiedTimeColumnBase, departmentEntity.FindProperty("LastModifiedTime")!, wiredBrainCoffeeEmployeeManagerInfrastructureEntitiesDepartmentEntityMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase, departmentEntity.FindProperty("Name")!, wiredBrainCoffeeEmployeeManagerInfrastructureEntitiesDepartmentEntityMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)versionColumnBase, departmentEntity.FindProperty("Version")!, wiredBrainCoffeeEmployeeManagerInfrastructureEntitiesDepartmentEntityMappingBase);

            var tableMappings = new List<TableMapping>();
            departmentEntity.SetRuntimeAnnotation("Relational:TableMappings", tableMappings);
            var departmentsTable = new Table("Departments", null, relationalModel);
            var idColumn = new Column("Id", "INTEGER", departmentsTable);
            departmentsTable.Columns.Add("Id", idColumn);
            var lastModifiedTimeColumn = new Column("LastModifiedTime", "INTEGER", departmentsTable);
            departmentsTable.Columns.Add("LastModifiedTime", lastModifiedTimeColumn);
            var nameColumn = new Column("Name", "TEXT", departmentsTable);
            departmentsTable.Columns.Add("Name", nameColumn);
            var versionColumn = new Column("Version", "INTEGER", departmentsTable);
            departmentsTable.Columns.Add("Version", versionColumn);
            var pK_Departments = new UniqueConstraint("PK_Departments", departmentsTable, new[] { idColumn });
            departmentsTable.PrimaryKey = pK_Departments;
            var pK_DepartmentsUc = RelationalModel.GetKey(this,
                "WiredBrainCoffee.EmployeeManager.Infrastructure.Entities.DepartmentEntity",
                new[] { "Id" });
            pK_Departments.MappedKeys.Add(pK_DepartmentsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_DepartmentsUc).Add(pK_Departments);
            departmentsTable.UniqueConstraints.Add("PK_Departments", pK_Departments);
            relationalModel.Tables.Add(("Departments", null), departmentsTable);
            var departmentsTableMapping = new TableMapping(departmentEntity, departmentsTable, true);
            departmentsTable.AddTypeMapping(departmentsTableMapping, false);
            tableMappings.Add(departmentsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn, departmentEntity.FindProperty("Id")!, departmentsTableMapping);
            RelationalModel.CreateColumnMapping(lastModifiedTimeColumn, departmentEntity.FindProperty("LastModifiedTime")!, departmentsTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn, departmentEntity.FindProperty("Name")!, departmentsTableMapping);
            RelationalModel.CreateColumnMapping(versionColumn, departmentEntity.FindProperty("Version")!, departmentsTableMapping);

            var employeeEntity = FindEntityType("WiredBrainCoffee.EmployeeManager.Infrastructure.Entities.EmployeeEntity")!;

            var defaultTableMappings0 = new List<TableMappingBase<ColumnMappingBase>>();
            employeeEntity.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings0);
            var wiredBrainCoffeeEmployeeManagerInfrastructureEntitiesEmployeeEntityTableBase = new TableBase("WiredBrainCoffee.EmployeeManager.Infrastructure.Entities.EmployeeEntity", null, relationalModel);
            var departmentIdColumnBase = new ColumnBase<ColumnMappingBase>("DepartmentId", "INTEGER", wiredBrainCoffeeEmployeeManagerInfrastructureEntitiesEmployeeEntityTableBase);
            wiredBrainCoffeeEmployeeManagerInfrastructureEntitiesEmployeeEntityTableBase.Columns.Add("DepartmentId", departmentIdColumnBase);
            var firstNameColumnBase = new ColumnBase<ColumnMappingBase>("FirstName", "TEXT", wiredBrainCoffeeEmployeeManagerInfrastructureEntitiesEmployeeEntityTableBase);
            wiredBrainCoffeeEmployeeManagerInfrastructureEntitiesEmployeeEntityTableBase.Columns.Add("FirstName", firstNameColumnBase);
            var idColumnBase0 = new ColumnBase<ColumnMappingBase>("Id", "INTEGER", wiredBrainCoffeeEmployeeManagerInfrastructureEntitiesEmployeeEntityTableBase);
            wiredBrainCoffeeEmployeeManagerInfrastructureEntitiesEmployeeEntityTableBase.Columns.Add("Id", idColumnBase0);
            var isDeveloperColumnBase = new ColumnBase<ColumnMappingBase>("IsDeveloper", "INTEGER", wiredBrainCoffeeEmployeeManagerInfrastructureEntitiesEmployeeEntityTableBase);
            wiredBrainCoffeeEmployeeManagerInfrastructureEntitiesEmployeeEntityTableBase.Columns.Add("IsDeveloper", isDeveloperColumnBase);
            var lastModifiedTimeColumnBase0 = new ColumnBase<ColumnMappingBase>("LastModifiedTime", "INTEGER", wiredBrainCoffeeEmployeeManagerInfrastructureEntitiesEmployeeEntityTableBase);
            wiredBrainCoffeeEmployeeManagerInfrastructureEntitiesEmployeeEntityTableBase.Columns.Add("LastModifiedTime", lastModifiedTimeColumnBase0);
            var lastNameColumnBase = new ColumnBase<ColumnMappingBase>("LastName", "TEXT", wiredBrainCoffeeEmployeeManagerInfrastructureEntitiesEmployeeEntityTableBase);
            wiredBrainCoffeeEmployeeManagerInfrastructureEntitiesEmployeeEntityTableBase.Columns.Add("LastName", lastNameColumnBase);
            var versionColumnBase0 = new ColumnBase<ColumnMappingBase>("Version", "INTEGER", wiredBrainCoffeeEmployeeManagerInfrastructureEntitiesEmployeeEntityTableBase);
            wiredBrainCoffeeEmployeeManagerInfrastructureEntitiesEmployeeEntityTableBase.Columns.Add("Version", versionColumnBase0);
            relationalModel.DefaultTables.Add("WiredBrainCoffee.EmployeeManager.Infrastructure.Entities.EmployeeEntity", wiredBrainCoffeeEmployeeManagerInfrastructureEntitiesEmployeeEntityTableBase);
            var wiredBrainCoffeeEmployeeManagerInfrastructureEntitiesEmployeeEntityMappingBase = new TableMappingBase<ColumnMappingBase>(employeeEntity, wiredBrainCoffeeEmployeeManagerInfrastructureEntitiesEmployeeEntityTableBase, true);
            wiredBrainCoffeeEmployeeManagerInfrastructureEntitiesEmployeeEntityTableBase.AddTypeMapping(wiredBrainCoffeeEmployeeManagerInfrastructureEntitiesEmployeeEntityMappingBase, false);
            defaultTableMappings0.Add(wiredBrainCoffeeEmployeeManagerInfrastructureEntitiesEmployeeEntityMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase0, employeeEntity.FindProperty("Id")!, wiredBrainCoffeeEmployeeManagerInfrastructureEntitiesEmployeeEntityMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)departmentIdColumnBase, employeeEntity.FindProperty("DepartmentId")!, wiredBrainCoffeeEmployeeManagerInfrastructureEntitiesEmployeeEntityMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)firstNameColumnBase, employeeEntity.FindProperty("FirstName")!, wiredBrainCoffeeEmployeeManagerInfrastructureEntitiesEmployeeEntityMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)isDeveloperColumnBase, employeeEntity.FindProperty("IsDeveloper")!, wiredBrainCoffeeEmployeeManagerInfrastructureEntitiesEmployeeEntityMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)lastModifiedTimeColumnBase0, employeeEntity.FindProperty("LastModifiedTime")!, wiredBrainCoffeeEmployeeManagerInfrastructureEntitiesEmployeeEntityMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)lastNameColumnBase, employeeEntity.FindProperty("LastName")!, wiredBrainCoffeeEmployeeManagerInfrastructureEntitiesEmployeeEntityMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)versionColumnBase0, employeeEntity.FindProperty("Version")!, wiredBrainCoffeeEmployeeManagerInfrastructureEntitiesEmployeeEntityMappingBase);

            var tableMappings0 = new List<TableMapping>();
            employeeEntity.SetRuntimeAnnotation("Relational:TableMappings", tableMappings0);
            var employeesTable = new Table("Employees", null, relationalModel);
            var idColumn0 = new Column("Id", "INTEGER", employeesTable);
            employeesTable.Columns.Add("Id", idColumn0);
            var departmentIdColumn = new Column("DepartmentId", "INTEGER", employeesTable);
            employeesTable.Columns.Add("DepartmentId", departmentIdColumn);
            var firstNameColumn = new Column("FirstName", "TEXT", employeesTable);
            employeesTable.Columns.Add("FirstName", firstNameColumn);
            var isDeveloperColumn = new Column("IsDeveloper", "INTEGER", employeesTable);
            employeesTable.Columns.Add("IsDeveloper", isDeveloperColumn);
            var lastModifiedTimeColumn0 = new Column("LastModifiedTime", "INTEGER", employeesTable);
            employeesTable.Columns.Add("LastModifiedTime", lastModifiedTimeColumn0);
            var lastNameColumn = new Column("LastName", "TEXT", employeesTable);
            employeesTable.Columns.Add("LastName", lastNameColumn);
            var versionColumn0 = new Column("Version", "INTEGER", employeesTable);
            employeesTable.Columns.Add("Version", versionColumn0);
            var pK_Employees = new UniqueConstraint("PK_Employees", employeesTable, new[] { idColumn0 });
            employeesTable.PrimaryKey = pK_Employees;
            var pK_EmployeesUc = RelationalModel.GetKey(this,
                "WiredBrainCoffee.EmployeeManager.Infrastructure.Entities.EmployeeEntity",
                new[] { "Id" });
            pK_Employees.MappedKeys.Add(pK_EmployeesUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_EmployeesUc).Add(pK_Employees);
            employeesTable.UniqueConstraints.Add("PK_Employees", pK_Employees);
            var iX_Employees_DepartmentId = new TableIndex(
            "IX_Employees_DepartmentId", employeesTable, new[] { departmentIdColumn }, false);
            var iX_Employees_DepartmentIdIx = RelationalModel.GetIndex(this,
                "WiredBrainCoffee.EmployeeManager.Infrastructure.Entities.EmployeeEntity",
                new[] { "DepartmentId" });
            iX_Employees_DepartmentId.MappedIndexes.Add(iX_Employees_DepartmentIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Employees_DepartmentIdIx).Add(iX_Employees_DepartmentId);
            employeesTable.Indexes.Add("IX_Employees_DepartmentId", iX_Employees_DepartmentId);
            relationalModel.Tables.Add(("Employees", null), employeesTable);
            var employeesTableMapping = new TableMapping(employeeEntity, employeesTable, true);
            employeesTable.AddTypeMapping(employeesTableMapping, false);
            tableMappings0.Add(employeesTableMapping);
            RelationalModel.CreateColumnMapping(idColumn0, employeeEntity.FindProperty("Id")!, employeesTableMapping);
            RelationalModel.CreateColumnMapping(departmentIdColumn, employeeEntity.FindProperty("DepartmentId")!, employeesTableMapping);
            RelationalModel.CreateColumnMapping(firstNameColumn, employeeEntity.FindProperty("FirstName")!, employeesTableMapping);
            RelationalModel.CreateColumnMapping(isDeveloperColumn, employeeEntity.FindProperty("IsDeveloper")!, employeesTableMapping);
            RelationalModel.CreateColumnMapping(lastModifiedTimeColumn0, employeeEntity.FindProperty("LastModifiedTime")!, employeesTableMapping);
            RelationalModel.CreateColumnMapping(lastNameColumn, employeeEntity.FindProperty("LastName")!, employeesTableMapping);
            RelationalModel.CreateColumnMapping(versionColumn0, employeeEntity.FindProperty("Version")!, employeesTableMapping);
            var fK_Employees_Departments_DepartmentId = new ForeignKeyConstraint(
                "FK_Employees_Departments_DepartmentId", employeesTable, departmentsTable,
                new[] { departmentIdColumn },
                departmentsTable.FindUniqueConstraint("PK_Departments")!, ReferentialAction.Cascade);
            var fK_Employees_Departments_DepartmentIdFk = RelationalModel.GetForeignKey(this,
                "WiredBrainCoffee.EmployeeManager.Infrastructure.Entities.EmployeeEntity",
                new[] { "DepartmentId" },
                "WiredBrainCoffee.EmployeeManager.Infrastructure.Entities.DepartmentEntity",
                new[] { "Id" });
            fK_Employees_Departments_DepartmentId.MappedForeignKeys.Add(fK_Employees_Departments_DepartmentIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Employees_Departments_DepartmentIdFk).Add(fK_Employees_Departments_DepartmentId);
            employeesTable.ForeignKeyConstraints.Add(fK_Employees_Departments_DepartmentId);
            departmentsTable.ReferencingForeignKeyConstraints.Add(fK_Employees_Departments_DepartmentId);
            return relationalModel.MakeReadOnly();
        }
    }
}
