// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;

#pragma warning disable 219, 612, 618
#nullable disable

namespace CarInventory.Infrastructure.Persistence.CompiledModels
{
    public partial class CarsDbContextModel
    {
        partial void Initialize()
        {
            var car = CarEntityType.Create(this);

            CarEntityType.CreateAnnotations(car);

            AddAnnotation("ProductVersion", "8.0.1");
            AddRuntimeAnnotation("Relational:RelationalModel", CreateRelationalModel());
        }

        private IRelationalModel CreateRelationalModel()
        {
            var relationalModel = new RelationalModel(this);

            var car = FindEntityType("CarInventory.Domain.Models.Car")!;

            var defaultTableMappings = new List<TableMappingBase<ColumnMappingBase>>();
            car.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings);
            var carInventoryDomainModelsCarTableBase = new TableBase("CarInventory.Domain.Models.Car", null, relationalModel);
            var engine_typeColumnBase = new ColumnBase<ColumnMappingBase>("engine_type", "INTEGER", carInventoryDomainModelsCarTableBase);
            carInventoryDomainModelsCarTableBase.Columns.Add("engine_type", engine_typeColumnBase);
            var fuel_capacityColumnBase = new ColumnBase<ColumnMappingBase>("fuel_capacity", "REAL", carInventoryDomainModelsCarTableBase);
            carInventoryDomainModelsCarTableBase.Columns.Add("fuel_capacity", fuel_capacityColumnBase);
            var horse_powerColumnBase = new ColumnBase<ColumnMappingBase>("horse_power", "INTEGER", carInventoryDomainModelsCarTableBase);
            carInventoryDomainModelsCarTableBase.Columns.Add("horse_power", horse_powerColumnBase);
            var idColumnBase = new ColumnBase<ColumnMappingBase>("id", "TEXT", carInventoryDomainModelsCarTableBase);
            carInventoryDomainModelsCarTableBase.Columns.Add("id", idColumnBase);
            var makeColumnBase = new ColumnBase<ColumnMappingBase>("make", "TEXT", carInventoryDomainModelsCarTableBase);
            carInventoryDomainModelsCarTableBase.Columns.Add("make", makeColumnBase);
            var modelColumnBase = new ColumnBase<ColumnMappingBase>("model", "TEXT", carInventoryDomainModelsCarTableBase);
            carInventoryDomainModelsCarTableBase.Columns.Add("model", modelColumnBase);
            var mpgColumnBase = new ColumnBase<ColumnMappingBase>("mpg", "REAL", carInventoryDomainModelsCarTableBase);
            carInventoryDomainModelsCarTableBase.Columns.Add("mpg", mpgColumnBase);
            var number_of_doorsColumnBase = new ColumnBase<ColumnMappingBase>("number_of_doors", "INTEGER", carInventoryDomainModelsCarTableBase);
            carInventoryDomainModelsCarTableBase.Columns.Add("number_of_doors", number_of_doorsColumnBase);
            relationalModel.DefaultTables.Add("CarInventory.Domain.Models.Car", carInventoryDomainModelsCarTableBase);
            var carInventoryDomainModelsCarMappingBase = new TableMappingBase<ColumnMappingBase>(car, carInventoryDomainModelsCarTableBase, true);
            carInventoryDomainModelsCarTableBase.AddTypeMapping(carInventoryDomainModelsCarMappingBase, false);
            defaultTableMappings.Add(carInventoryDomainModelsCarMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase, car.FindProperty("Id")!, carInventoryDomainModelsCarMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)engine_typeColumnBase, car.FindProperty("Engine")!, carInventoryDomainModelsCarMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)fuel_capacityColumnBase, car.FindProperty("FuelCapacityInLitres")!, carInventoryDomainModelsCarMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)horse_powerColumnBase, car.FindProperty("HorsePower")!, carInventoryDomainModelsCarMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)makeColumnBase, car.FindProperty("Make")!, carInventoryDomainModelsCarMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)modelColumnBase, car.FindProperty("Model")!, carInventoryDomainModelsCarMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)mpgColumnBase, car.FindProperty("MpG")!, carInventoryDomainModelsCarMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)number_of_doorsColumnBase, car.FindProperty("NumberOfDoors")!, carInventoryDomainModelsCarMappingBase);

            var tableMappings = new List<TableMapping>();
            car.SetRuntimeAnnotation("Relational:TableMappings", tableMappings);
            var carsTable = new Table("cars", null, relationalModel);
            var idColumn = new Column("id", "TEXT", carsTable);
            carsTable.Columns.Add("id", idColumn);
            var engine_typeColumn = new Column("engine_type", "INTEGER", carsTable);
            carsTable.Columns.Add("engine_type", engine_typeColumn);
            var fuel_capacityColumn = new Column("fuel_capacity", "REAL", carsTable);
            carsTable.Columns.Add("fuel_capacity", fuel_capacityColumn);
            var horse_powerColumn = new Column("horse_power", "INTEGER", carsTable);
            carsTable.Columns.Add("horse_power", horse_powerColumn);
            var makeColumn = new Column("make", "TEXT", carsTable);
            carsTable.Columns.Add("make", makeColumn);
            var modelColumn = new Column("model", "TEXT", carsTable);
            carsTable.Columns.Add("model", modelColumn);
            var mpgColumn = new Column("mpg", "REAL", carsTable);
            carsTable.Columns.Add("mpg", mpgColumn);
            var number_of_doorsColumn = new Column("number_of_doors", "INTEGER", carsTable);
            carsTable.Columns.Add("number_of_doors", number_of_doorsColumn);
            var pK_cars = new UniqueConstraint("PK_cars", carsTable, new[] { idColumn });
            carsTable.PrimaryKey = pK_cars;
            var pK_carsUc = RelationalModel.GetKey(this,
                "CarInventory.Domain.Models.Car",
                new[] { "Id" });
            pK_cars.MappedKeys.Add(pK_carsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_carsUc).Add(pK_cars);
            carsTable.UniqueConstraints.Add("PK_cars", pK_cars);
            var iX_cars_make_model = new TableIndex(
            "IX_cars_make_model", carsTable, new[] { makeColumn, modelColumn }, true);
            var iX_cars_make_modelIx = RelationalModel.GetIndex(this,
                "CarInventory.Domain.Models.Car",
                new[] { "Make", "Model" });
            iX_cars_make_model.MappedIndexes.Add(iX_cars_make_modelIx);
            RelationalModel.GetOrCreateTableIndexes(iX_cars_make_modelIx).Add(iX_cars_make_model);
            carsTable.Indexes.Add("IX_cars_make_model", iX_cars_make_model);
            relationalModel.Tables.Add(("cars", null), carsTable);
            var carsTableMapping = new TableMapping(car, carsTable, true);
            carsTable.AddTypeMapping(carsTableMapping, false);
            tableMappings.Add(carsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn, car.FindProperty("Id")!, carsTableMapping);
            RelationalModel.CreateColumnMapping(engine_typeColumn, car.FindProperty("Engine")!, carsTableMapping);
            RelationalModel.CreateColumnMapping(fuel_capacityColumn, car.FindProperty("FuelCapacityInLitres")!, carsTableMapping);
            RelationalModel.CreateColumnMapping(horse_powerColumn, car.FindProperty("HorsePower")!, carsTableMapping);
            RelationalModel.CreateColumnMapping(makeColumn, car.FindProperty("Make")!, carsTableMapping);
            RelationalModel.CreateColumnMapping(modelColumn, car.FindProperty("Model")!, carsTableMapping);
            RelationalModel.CreateColumnMapping(mpgColumn, car.FindProperty("MpG")!, carsTableMapping);
            RelationalModel.CreateColumnMapping(number_of_doorsColumn, car.FindProperty("NumberOfDoors")!, carsTableMapping);
            return relationalModel.MakeReadOnly();
        }
    }
}
