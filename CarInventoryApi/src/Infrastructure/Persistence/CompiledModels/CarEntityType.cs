// <auto-generated />
using System;
using System.Reflection;
using CarInventory.Domain.Models;
using CarInventory.Infrastructure.Persistence.Converters;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Json;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#pragma warning disable 219, 612, 618
#nullable disable

namespace CarInventory.Infrastructure.Persistence.CompiledModels
{
    internal partial class CarEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "CarInventory.Domain.Models.Car",
                typeof(Car),
                baseEntityType);

            var id = runtimeEntityType.AddProperty(
                "Id",
                typeof(Guid),
                propertyInfo: typeof(Car).GetProperty("Id", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Car).GetField("<Id>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: new Guid("00000000-0000-0000-0000-000000000000"));
            id.TypeMapping = SqliteGuidTypeMapping.Default;
            id.AddAnnotation("Relational:ColumnName", "id");

            var engine = runtimeEntityType.AddProperty(
                "Engine",
                typeof(EngineType),
                propertyInfo: typeof(Car).GetProperty("Engine", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Car).GetField("<Engine>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            engine.TypeMapping = IntTypeMapping.Default.Clone(
                comparer: new ValueComparer<EngineType>(
                    (EngineType v1, EngineType v2) => object.Equals((object)v1, (object)v2),
                    (EngineType v) => v.GetHashCode(),
                    (EngineType v) => v),
                keyComparer: new ValueComparer<EngineType>(
                    (EngineType v1, EngineType v2) => object.Equals((object)v1, (object)v2),
                    (EngineType v) => v.GetHashCode(),
                    (EngineType v) => v),
                providerValueComparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "INTEGER"),
                converter: new ValueConverter<EngineType, int>(
                    (EngineType value) => (int)value,
                    (int value) => (EngineType)value),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<EngineType, int>(
                    JsonInt32ReaderWriter.Instance,
                    new ValueConverter<EngineType, int>(
                        (EngineType value) => (int)value,
                        (int value) => (EngineType)value)));
            engine.SetSentinelFromProviderValue(0);
            engine.AddAnnotation("Relational:ColumnName", "engine_type");

            var fuelCapacityInLitres = runtimeEntityType.AddProperty(
                "FuelCapacityInLitres",
                typeof(decimal),
                propertyInfo: typeof(Car).GetProperty("FuelCapacityInLitres", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Car).GetField("_fuelCapacityInLitres", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field,
                valueConverter: new DecimalToDoubleValueConverter());
            fuelCapacityInLitres.TypeMapping = DoubleTypeMapping.Default.Clone(
                comparer: new ValueComparer<decimal>(
                    (decimal v1, decimal v2) => v1 == v2,
                    (decimal v) => v.GetHashCode(),
                    (decimal v) => v),
                keyComparer: new ValueComparer<decimal>(
                    (decimal v1, decimal v2) => v1 == v2,
                    (decimal v) => v.GetHashCode(),
                    (decimal v) => v),
                providerValueComparer: new ValueComparer<double>(
                    (double v1, double v2) => v1.Equals(v2),
                    (double v) => v.GetHashCode(),
                    (double v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "REAL"),
                converter: new ValueConverter<decimal, double>(
                    (decimal dec) => Convert.ToDouble(dec),
                    (double doub) => new decimal (doub)),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<decimal, double>(
                    JsonDoubleReaderWriter.Instance,
                    new ValueConverter<decimal, double>(
                        (decimal dec) => Convert.ToDouble(dec),
                        (double doub) => new decimal (doub))));
            fuelCapacityInLitres.SetSentinelFromProviderValue(0.0);
            fuelCapacityInLitres.AddAnnotation("Relational:ColumnName", "fuel_capacity");

            var horsePower = runtimeEntityType.AddProperty(
                "HorsePower",
                typeof(int),
                propertyInfo: typeof(Car).GetProperty("HorsePower", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Car).GetField("_horsePower", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field,
                sentinel: 0);
            horsePower.TypeMapping = IntTypeMapping.Default.Clone(
                comparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v),
                keyComparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v),
                providerValueComparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "INTEGER"));
            horsePower.AddAnnotation("Relational:ColumnName", "horse_power");

            var make = runtimeEntityType.AddProperty(
                "Make",
                typeof(string),
                propertyInfo: typeof(Car).GetProperty("Make", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Car).GetField("<Make>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                maxLength: 50,
                unicode: true);
            make.TypeMapping = SqliteStringTypeMapping.Default;
            make.AddAnnotation("Relational:ColumnName", "make");

            var model0 = runtimeEntityType.AddProperty(
                "Model",
                typeof(string),
                propertyInfo: typeof(Car).GetProperty("Model", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Car).GetField("<Model>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                maxLength: 50,
                unicode: true);
            model0.TypeMapping = SqliteStringTypeMapping.Default;
            model0.AddAnnotation("Relational:ColumnName", "model");

            var mpG = runtimeEntityType.AddProperty(
                "MpG",
                typeof(decimal),
                propertyInfo: typeof(Car).GetProperty("MpG", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Car).GetField("_mpg", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field,
                valueConverter: new DecimalToDoubleValueConverter());
            mpG.TypeMapping = DoubleTypeMapping.Default.Clone(
                comparer: new ValueComparer<decimal>(
                    (decimal v1, decimal v2) => v1 == v2,
                    (decimal v) => v.GetHashCode(),
                    (decimal v) => v),
                keyComparer: new ValueComparer<decimal>(
                    (decimal v1, decimal v2) => v1 == v2,
                    (decimal v) => v.GetHashCode(),
                    (decimal v) => v),
                providerValueComparer: new ValueComparer<double>(
                    (double v1, double v2) => v1.Equals(v2),
                    (double v) => v.GetHashCode(),
                    (double v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "REAL"),
                converter: new ValueConverter<decimal, double>(
                    (decimal dec) => Convert.ToDouble(dec),
                    (double doub) => new decimal (doub)),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<decimal, double>(
                    JsonDoubleReaderWriter.Instance,
                    new ValueConverter<decimal, double>(
                        (decimal dec) => Convert.ToDouble(dec),
                        (double doub) => new decimal (doub))));
            mpG.SetSentinelFromProviderValue(0.0);
            mpG.AddAnnotation("Relational:ColumnName", "mpg");

            var numberOfDoors = runtimeEntityType.AddProperty(
                "NumberOfDoors",
                typeof(int),
                propertyInfo: typeof(Car).GetProperty("NumberOfDoors", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Car).GetField("_numberOfDoors", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field,
                sentinel: 0);
            numberOfDoors.TypeMapping = IntTypeMapping.Default.Clone(
                comparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v),
                keyComparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v),
                providerValueComparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "INTEGER"));
            numberOfDoors.AddAnnotation("Relational:ColumnName", "number_of_doors");

            var key = runtimeEntityType.AddKey(
                new[] { id });
            runtimeEntityType.SetPrimaryKey(key);

            var index = runtimeEntityType.AddIndex(
                new[] { make, model0 },
                unique: true);

            return runtimeEntityType;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "cars");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
